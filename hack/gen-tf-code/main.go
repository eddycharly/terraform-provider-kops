package main

import (
	"fmt"
	"log"
	"path"
	"reflect"
	"text/template"

	"github.com/Masterminds/sprig"
	"github.com/eddycharly/terraform-provider-kops/pkg/api/config"
	"github.com/eddycharly/terraform-provider-kops/pkg/api/datasources"
	"github.com/eddycharly/terraform-provider-kops/pkg/api/kube"
	"github.com/eddycharly/terraform-provider-kops/pkg/api/resources"
	"github.com/eddycharly/terraform-provider-kops/pkg/api/utils"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	// kops "k8s.io/kops/pkg/apis/kops"
	kopsv1alpha2 "k8s.io/kops/pkg/apis/kops/v1alpha2"
)

var mappings = map[string]string{
	"github.com/eddycharly/terraform-provider-kops/pkg/api/config":      "config",
	"github.com/eddycharly/terraform-provider-kops/pkg/api/datasources": "datasources",
	"github.com/eddycharly/terraform-provider-kops/pkg/api/kube":        "kube",
	"github.com/eddycharly/terraform-provider-kops/pkg/api/resources":   "resources",
	"github.com/eddycharly/terraform-provider-kops/pkg/api/utils":       "utils",
	"k8s.io/kops/pkg/apis/kops/v1alpha2":                                "kopsv1alpha2",
	"k8s.io/kops/pkg/apis/kops":                                         "kops",
	"k8s.io/api/core/v1":                                                "core",
	"k8s.io/apimachinery/pkg/apis/meta/v1":                              "meta",
}

func buildDoc(t reflect.Type, p string, funcMaps ...template.FuncMap) {
	fileName := toSnakeCase(fieldName(t.Name())) + ".md"
	executeTemplate(t, docsTemplate, p, fileName, funcMaps...)
}

func buildSchema(t reflect.Type, p, scope string, funcMaps ...template.FuncMap) {
	fileName := fmt.Sprintf("%s_%s.generated.go", scope, t.Name())
	executeTemplate(t, schemasTemplate, p, fileName, funcMaps...)
}

func buildTests(t reflect.Type, p, scope string, funcMaps ...template.FuncMap) {
	fileName := fmt.Sprintf("%s_%s.generated_test.go", scope, t.Name())
	executeTemplate(t, testsTemplate, p, fileName, funcMaps...)
}

type generated struct {
	t reflect.Type
	o *options
}

func generate(i interface{}, opts ...func(o *options)) generated {
	t := reflect.TypeOf(i)
	o := newOptions()
	for _, opt := range opts {
		opt(o)
	}
	if err := o.verify(t); err != nil {
		panic(err)
	}
	return generated{
		t: t,
		o: o,
	}
}

func build(scope, docs string, parser *parser, g ...generated) {
	o := map[reflect.Type]*options{}
	for _, gen := range g {
		o[gen.t] = gen.o
	}
	for _, gen := range g {
		funcMaps := []template.FuncMap{
			reflectFuncs(gen.t, mappings, parser),
			optionFuncs(scope == "DataSource", o, parser),
			schemaFuncs(scope),
			sprig.TxtFuncMap(),
		}
		buildSchema(gen.t, path.Join("pkg/schemas", mappings[gen.t.PkgPath()]), scope, funcMaps...)
		buildTests(gen.t, path.Join("pkg/schemas", mappings[gen.t.PkgPath()]), scope, funcMaps...)
		if gen.o.doc != nil {
			buildDoc(gen.t, docs, append(funcMaps, docFuncs(gen.o.doc.header, gen.o.doc.footer, parser, o))...)
		}
	}
}

func main() {
	log.Println("loading packages...")
	parser, err := initParser(
		"github.com/eddycharly/terraform-provider-kops/pkg/api/config",
		"github.com/eddycharly/terraform-provider-kops/pkg/api/datasources",
		"github.com/eddycharly/terraform-provider-kops/pkg/api/kube",
		"github.com/eddycharly/terraform-provider-kops/pkg/api/resources",
	)
	if err != nil {
		panic(err)
	}
	log.Println("generating schemas, expanders and flatteners...")
	build(
		"Resource",
		"docs/resources/",
		parser,
		generate(resources.Cluster{},
			version(4),
			required("Name"),
			computedOnly("Revision"),
			sensitive("AdminSshKey"),
			forceNew("Name"),
			doc(resourceClusterHeader, resourceClusterFooter),
		),
		generate(resources.InstanceGroup{},
			version(2),
			required("ClusterName", "Name"),
			forceNew("ClusterName", "Name"),
			computedOnly("Revision"),
			doc(resourceInstanceGroupHeader, resourceInstanceGroupFooter),
		),
		generate(resources.ClusterUpdater{},
			required("ClusterName"),
			computedOnly("Revision", "ProviderVersion"),
			doc(resourceClusterUpdaterHeader, ""),
		),
		generate(utils.RollingUpdateOptions{},
			noSchema(),
		),
		generate(resources.ClusterSecrets{},
			sensitive("DockerConfig", "ClusterCaCert", "ClusterCaKey"),
			computed("ClusterCaCert", "ClusterCaKey"),
		),
		generate(resources.ValidateOptions{}),
		generate(utils.ValidateOptions{},
			noSchema(),
		),
		generate(resources.ApplyOptions{}),
		generate(kopsv1alpha2.ClusterSpec{},
			noSchema(),
			exclude("GossipConfig", "DNSControllerGossipConfig", "Target", "CloudProvider"),
			rename("EtcdClusters", "EtcdCluster"),
			required("EtcdClusters", "Networking"),
			computed("ConfigBase", "IAM"),
		),
		generate(kopsv1alpha2.InstanceMetadataOptions{}),
		generate(kopsv1alpha2.NodeTerminationHandlerSpec{},
			required("Enabled", "EnableSpotInterruptionDraining"),
		),
		generate(kopsv1alpha2.MetricsServerConfig{},
			required("Insecure"),
		),
		generate(kopsv1alpha2.ClusterAutoscalerConfig{},
			required("SkipNodesWithSystemPods", "SkipNodesWithLocalStorage"),
		),
		generate(kopsv1alpha2.AddonSpec{},
			required("Manifest"),
		),
		generate(kopsv1alpha2.EgressProxySpec{},
			required("HTTPProxy"),
		),
		generate(kopsv1alpha2.HTTPProxy{},
			required("Host", "Port"),
		),
		generate(kopsv1alpha2.ContainerdConfig{}),
		generate(kopsv1alpha2.PackagesConfig{}),
		generate(kopsv1alpha2.DockerConfig{}),
		generate(kopsv1alpha2.KubeDNSConfig{}),
		generate(kopsv1alpha2.KubeAPIServerConfig{},
			nullable("AnonymousAuth"),
		),
		generate(kopsv1alpha2.KubeControllerManagerConfig{}),
		generate(kopsv1alpha2.CloudControllerManagerConfig{}),
		generate(kopsv1alpha2.KubeSchedulerConfig{}),
		generate(kopsv1alpha2.KubeProxyConfig{},
			required("Enabled"),
		),
		generate(kopsv1alpha2.KubeletConfigSpec{},
			nullable("AnonymousAuth", "CPUCFSQuota"),
		),
		generate(kopsv1alpha2.CloudConfiguration{},
			nullable("ManageStorageClasses"),
		),
		generate(kopsv1alpha2.ExternalDNSConfig{}),
		generate(kopsv1alpha2.OpenstackLoadbalancerConfig{}),
		generate(kopsv1alpha2.OpenstackMonitor{}),
		generate(kopsv1alpha2.OpenstackRouter{}),
		generate(kopsv1alpha2.OpenstackBlockStorageConfig{}),
		generate(kopsv1alpha2.LeaderElectionConfiguration{}),
		generate(kopsv1alpha2.NodeLocalDNSConfig{}),
		generate(kopsv1alpha2.AuthenticationSpec{}),
		generate(kopsv1alpha2.AuthorizationSpec{}),
		generate(kopsv1alpha2.NodeAuthorizationSpec{}),
		generate(kopsv1alpha2.Assets{}),
		generate(kopsv1alpha2.IAMSpec{}),
		generate(kopsv1alpha2.KopeioAuthenticationSpec{}),
		generate(kopsv1alpha2.AWSAuthenticationSpec{}),
		generate(kopsv1alpha2.AlwaysAllowAuthorizationSpec{}),
		generate(kopsv1alpha2.RBACAuthorizationSpec{}),
		generate(kopsv1alpha2.NodeAuthorizerSpec{}),
		generate(kopsv1alpha2.InstanceGroupSpec{},
			noSchema(),
			required("Role", "MinSize", "MaxSize", "MachineType", "Subnets"),
			computed("Image", "Manager", "Kubelet"),
		),
		generate(kopsv1alpha2.AccessLogSpec{}),
		generate(kopsv1alpha2.DNSAccessSpec{}),
		generate(kopsv1alpha2.LoadBalancerAccessSpec{},
			required("Type"),
		),
		generate(kopsv1alpha2.EtcdClusterSpec{},
			required("Name", "Members"),
			rename("Members", "Member"),
		),
		generate(kopsv1alpha2.EtcdBackupSpec{},
			required("BackupStore", "Image"),
		),
		generate(kopsv1alpha2.EtcdManagerSpec{}),
		generate(kopsv1alpha2.EtcdMemberSpec{},
			required("Name", "InstanceGroup"),
		),
		generate(kopsv1alpha2.EnvVar{},
			required("Name"),
		),
		generate(kopsv1alpha2.ClusterSubnetSpec{},
			required("Name", "Type", "Zone"),
			computed("CIDR"),
		),
		generate(kopsv1alpha2.TopologySpec{},
			required("ControlPlane", "Nodes", "DNS"),
		),
		generate(kopsv1alpha2.BastionSpec{},
			required("PublicName"),
			rename("PublicName", "BastionPublicName"),
		),
		generate(kopsv1alpha2.BastionLoadBalancerSpec{},
			required("Type"),
		),
		generate(kopsv1alpha2.DNSAccessSpec{}),
		generate(kopsv1alpha2.DNSSpec{},
			required("Type"),
		),
		generate(kopsv1alpha2.NetworkingSpec{},
			rename("Subnets", "Subnet"),
			required("Subnets", "NetworkID", "Topology"),
			computed("NetworkCIDR", "NonMasqueradeCIDR"),
			nullable("TagSubnets"),
		),
		generate(kopsv1alpha2.ClassicNetworkingSpec{}),
		generate(kopsv1alpha2.KubenetNetworkingSpec{}),
		generate(kopsv1alpha2.ExternalNetworkingSpec{}),
		generate(kopsv1alpha2.CNINetworkingSpec{}),
		generate(kopsv1alpha2.KopeioNetworkingSpec{}),
		generate(kopsv1alpha2.WeaveNetworkingSpec{}),
		generate(kopsv1alpha2.FlannelNetworkingSpec{}),
		generate(kopsv1alpha2.CalicoNetworkingSpec{}),
		generate(kopsv1alpha2.CanalNetworkingSpec{}),
		generate(kopsv1alpha2.KuberouterNetworkingSpec{}),
		generate(kopsv1alpha2.RomanaNetworkingSpec{}),
		generate(kopsv1alpha2.AmazonVPCNetworkingSpec{}),
		generate(kopsv1alpha2.CiliumNetworkingSpec{},
			required("PreallocateBPFMaps", "EnableRemoteNodeIdentity"),
		),
		generate(kopsv1alpha2.HubbleSpec{}),
		generate(kopsv1alpha2.LyftVPCNetworkingSpec{}),
		generate(kopsv1alpha2.GCENetworkingSpec{}),
		generate(kopsv1alpha2.VolumeSpec{},
			required("Device"),
		),
		generate(kopsv1alpha2.VolumeMountSpec{},
			required("Device", "Filesystem", "Path"),
		),
		generate(kopsv1alpha2.MixedInstancesPolicySpec{},
			nullable("OnDemandBase", "OnDemandAboveBase"),
		),
		generate(kopsv1alpha2.UserData{},
			required("Name", "Type", "Content"),
		),
		generate(kopsv1alpha2.IAMProfileSpec{},
			required("Profile"),
		),
		generate(kopsv1alpha2.HookSpec{},
			required("Name"),
		),
		generate(kopsv1alpha2.ExecContainerAction{},
			required("Image"),
		),
		generate(kopsv1alpha2.FileAssetSpec{},
			required("Name", "Path", "Content"),
		),
		generate(kopsv1alpha2.RollingUpdate{}),
		// 1.20
		generate(resources.RollingUpdateOptions{}),
		generate(kopsv1alpha2.EBSCSIDriverSpec{}),
		generate(kopsv1alpha2.NTPConfig{}),
		generate(kopsv1alpha2.CertManagerConfig{},
			required("Enabled", "Managed"),
		),
		generate(kopsv1alpha2.LoadBalancerControllerSpec{}),
		generate(kopsv1alpha2.GossipConfigSecondary{}),
		generate(kopsv1alpha2.LoadBalancerSubnetSpec{}),
		generate(kopsv1alpha2.DNSControllerGossipConfigSecondary{}),
		generate(kopsv1alpha2.OpenstackNetwork{}),
		// 1.21
		generate(kopsv1alpha2.WarmPoolSpec{}),
		generate(kopsv1alpha2.ServiceAccountIssuerDiscoveryConfig{}),
		generate(kopsv1alpha2.SnapshotControllerConfig{}),
		generate(kopsv1alpha2.ServiceAccountExternalPermission{}),
		generate(kopsv1alpha2.AWSPermission{}),
		// 1.22
		generate(kopsv1alpha2.NodeProblemDetectorConfig{}),
		generate(kopsv1alpha2.NvidiaGPUConfig{}),
		generate(kopsv1alpha2.AccessLogSpec{}),
		generate(kopsv1alpha2.OpenstackMetadata{}),
		generate(corev1.Toleration{}),
		generate(corev1.Affinity{}),
		generate(corev1.NodeAffinity{}),
		generate(corev1.PodAffinity{}),
		generate(corev1.PodAntiAffinity{}),
		generate(corev1.PodAffinityTerm{}),
		generate(corev1.WeightedPodAffinityTerm{}),
		generate(corev1.PreferredSchedulingTerm{}),
		generate(corev1.NodeSelector{}),
		generate(corev1.NodeSelectorTerm{}),
		generate(corev1.NodeSelectorRequirement{}),
		generate(metav1.LabelSelector{}),
		generate(metav1.LabelSelectorRequirement{}),
		// 1.23
		generate(kopsv1alpha2.PDCSIDriver{}),
		generate(kopsv1alpha2.AWSAuthenticationIdentityMappingSpec{}),
		generate(kopsv1alpha2.PodIdentityWebhookSpec{}),
		//	1.24
		// generate(kops.CloudProviderSpec{}),
		generate(kopsv1alpha2.KarpenterConfig{}),
		generate(kopsv1alpha2.RouteSpec{}),
		generate(kopsv1alpha2.AcceleratorConfig{}),
		// generate(kops.AWSSpec{}),
		generate(kopsv1alpha2.AzureSpec{}),
		// generate(kops.DOSpec{}),
		// generate(kops.GCESpec{}),
		// generate(kops.HetznerSpec{}),
		generate(kopsv1alpha2.OpenstackSpec{}),
		generate(kopsv1alpha2.InstanceRequirementsSpec{}),
		generate(kopsv1alpha2.MinMaxSpec{}),
		generate(kopsv1alpha2.Runc{}),
		// 1.26
		// generate(kops.ScalewaySpec{}),
		generate(kopsv1alpha2.APISpec{}),
		generate(kopsv1alpha2.DCGMExporterConfig{}),
		generate(kopsv1alpha2.LoadBalancerSpec{}),
	)
	build(
		"Config",
		"docs/guides/",
		parser,
		generate(config.Provider{},
			required("StateStore"),
			doc(configProviderHeader, ""),
		),
		generate(config.Aws{}),
		generate(config.AwsAssumeRole{}),
		generate(config.Openstack{}),
		generate(config.Klog{},
			nullable("Verbosity"),
		),
	)
	build(
		"DataSource",
		"docs/data-sources/",
		parser,
		generate(datasources.KubeConfig{},
			required("ClusterName"),
			computed("Admin", "Internal"),
			doc(dataKubeConfigHeader, ""),
		),
		generate(datasources.ClusterStatus{},
			required("ClusterName"),
			doc(dataClusterStatusHeader, ""),
		),
		generate(resources.Cluster{},
			version(4),
			required("Name"),
			exclude("Revision"),
			doc(dataClusterHeader, ""),
		),
		generate(resources.InstanceGroup{},
			version(2),
			required("ClusterName", "Name"),
			exclude("Revision"),
			doc(dataInstanceGroupHeader, ""),
		),
		generate(resources.ClusterSecrets{},
			sensitive("DockerConfig", "ClusterCaCert", "ClusterCaKey"),
		),
		generate(kube.Config{},
			noSchema(),
			sensitive("KubeUser", "KubePassword", "CaCerts", "ClientCert", "ClientKey"),
		),
		generate(kopsv1alpha2.ClusterSpec{},
			exclude("GossipConfig", "DNSControllerGossipConfig", "Target", "CloudProvider"),
			rename("EtcdClusters", "EtcdCluster"),
		),
		generate(kopsv1alpha2.InstanceMetadataOptions{}),
		generate(kopsv1alpha2.NodeTerminationHandlerSpec{}),
		generate(kopsv1alpha2.MetricsServerConfig{}),
		generate(kopsv1alpha2.ClusterAutoscalerConfig{}),
		generate(kopsv1alpha2.AddonSpec{}),
		generate(kopsv1alpha2.GossipConfig{}),
		generate(kopsv1alpha2.ClusterSubnetSpec{}),
		generate(kopsv1alpha2.TopologySpec{}),
		generate(kopsv1alpha2.DNSControllerGossipConfig{}),
		generate(kopsv1alpha2.EgressProxySpec{}),
		generate(kopsv1alpha2.EtcdClusterSpec{},
			rename("Members", "Member"),
		),
		generate(kopsv1alpha2.ContainerdConfig{}),
		generate(kopsv1alpha2.PackagesConfig{}),
		generate(kopsv1alpha2.DockerConfig{}),
		generate(kopsv1alpha2.KubeDNSConfig{}),
		generate(kopsv1alpha2.KubeAPIServerConfig{},
			nullable("AnonymousAuth"),
		),
		generate(kopsv1alpha2.KubeControllerManagerConfig{}),
		generate(kopsv1alpha2.CloudControllerManagerConfig{}),
		generate(kopsv1alpha2.KubeSchedulerConfig{}),
		generate(kopsv1alpha2.KubeProxyConfig{}),
		generate(kopsv1alpha2.CloudConfiguration{},
			nullable("ManageStorageClasses"),
		),
		generate(kopsv1alpha2.ExternalDNSConfig{}),
		generate(kopsv1alpha2.DNSSpec{},
			required("Type"),
		),
		generate(kopsv1alpha2.NetworkingSpec{},
			rename("Subnets", "Subnet"),
			nullable("TagSubnets"),
		),
		generate(kopsv1alpha2.AccessLogSpec{}),
		generate(kopsv1alpha2.AuthenticationSpec{}),
		generate(kopsv1alpha2.DNSAccessSpec{}),
		generate(kopsv1alpha2.LoadBalancerAccessSpec{}),
		generate(kopsv1alpha2.KopeioAuthenticationSpec{}),
		generate(kopsv1alpha2.AWSAuthenticationSpec{}),
		generate(kopsv1alpha2.LeaderElectionConfiguration{}),
		generate(kopsv1alpha2.AuthorizationSpec{}),
		generate(kopsv1alpha2.NodeAuthorizationSpec{}),
		generate(kopsv1alpha2.Assets{}),
		generate(kopsv1alpha2.IAMSpec{}),
		generate(kopsv1alpha2.AlwaysAllowAuthorizationSpec{}),
		generate(kopsv1alpha2.RBACAuthorizationSpec{}),
		generate(kopsv1alpha2.HTTPProxy{}),
		generate(kopsv1alpha2.EtcdMemberSpec{}),
		generate(kopsv1alpha2.EtcdBackupSpec{}),
		generate(kopsv1alpha2.EtcdManagerSpec{}),
		generate(kopsv1alpha2.NodeLocalDNSConfig{}),
		generate(kopsv1alpha2.ClassicNetworkingSpec{}),
		generate(kopsv1alpha2.KubenetNetworkingSpec{}),
		generate(kopsv1alpha2.ExternalNetworkingSpec{}),
		generate(kopsv1alpha2.CNINetworkingSpec{}),
		generate(kopsv1alpha2.EnvVar{}),
		generate(kopsv1alpha2.KopeioNetworkingSpec{}),
		generate(kopsv1alpha2.WeaveNetworkingSpec{}),
		generate(kopsv1alpha2.FlannelNetworkingSpec{}),
		generate(kopsv1alpha2.CalicoNetworkingSpec{}),
		generate(kopsv1alpha2.CanalNetworkingSpec{}),
		generate(kopsv1alpha2.KuberouterNetworkingSpec{}),
		generate(kopsv1alpha2.RomanaNetworkingSpec{}),
		generate(kopsv1alpha2.AmazonVPCNetworkingSpec{}),
		generate(kopsv1alpha2.CiliumNetworkingSpec{}),
		generate(kopsv1alpha2.HubbleSpec{}),
		generate(kopsv1alpha2.LyftVPCNetworkingSpec{}),
		generate(kopsv1alpha2.GCENetworkingSpec{}),
		generate(kopsv1alpha2.NodeAuthorizerSpec{}),
		generate(kopsv1alpha2.OpenstackLoadbalancerConfig{}),
		generate(kopsv1alpha2.OpenstackMonitor{}),
		generate(kopsv1alpha2.OpenstackRouter{}),
		generate(kopsv1alpha2.OpenstackBlockStorageConfig{}),
		generate(kopsv1alpha2.BastionSpec{},
			rename("PublicName", "BastionPublicName"),
		),
		generate(kopsv1alpha2.DNSAccessSpec{}),
		generate(kopsv1alpha2.BastionLoadBalancerSpec{}),
		generate(kopsv1alpha2.InstanceGroupSpec{},
			noSchema(),
		),
		generate(kopsv1alpha2.VolumeSpec{}),
		generate(kopsv1alpha2.VolumeMountSpec{}),
		generate(kopsv1alpha2.HookSpec{}),
		generate(kopsv1alpha2.FileAssetSpec{}),
		generate(kopsv1alpha2.KubeletConfigSpec{},
			nullable("AnonymousAuth", "CPUCFSQuota"),
		),
		generate(kopsv1alpha2.MixedInstancesPolicySpec{},
			nullable("OnDemandBase", "OnDemandAboveBase"),
		),
		generate(kopsv1alpha2.UserData{}),
		generate(kopsv1alpha2.LoadBalancerAccessSpec{}),
		generate(kopsv1alpha2.IAMProfileSpec{}),
		generate(kopsv1alpha2.RollingUpdate{}),
		generate(kopsv1alpha2.ExecContainerAction{}),
		// 1.20
		generate(kopsv1alpha2.EBSCSIDriverSpec{}),
		generate(kopsv1alpha2.NTPConfig{}),
		generate(kopsv1alpha2.CertManagerConfig{}),
		generate(kopsv1alpha2.LoadBalancerControllerSpec{}),
		generate(kopsv1alpha2.GossipConfigSecondary{}),
		generate(kopsv1alpha2.LoadBalancerSubnetSpec{}),
		generate(kopsv1alpha2.DNSControllerGossipConfigSecondary{}),
		generate(kopsv1alpha2.OpenstackNetwork{}),
		// 1.21
		generate(kopsv1alpha2.WarmPoolSpec{}),
		generate(kopsv1alpha2.ServiceAccountIssuerDiscoveryConfig{}),
		generate(kopsv1alpha2.SnapshotControllerConfig{}),
		generate(kopsv1alpha2.ServiceAccountExternalPermission{}),
		generate(kopsv1alpha2.AWSPermission{}),
		// 1.22
		generate(kopsv1alpha2.NodeProblemDetectorConfig{}),
		generate(kopsv1alpha2.NvidiaGPUConfig{}),
		generate(kopsv1alpha2.AccessLogSpec{}),
		generate(kopsv1alpha2.OpenstackMetadata{}),
		generate(corev1.Toleration{}),
		generate(corev1.Affinity{}),
		generate(corev1.NodeAffinity{}),
		generate(corev1.PodAffinity{}),
		generate(corev1.PodAntiAffinity{}),
		generate(corev1.PodAffinityTerm{}),
		generate(corev1.WeightedPodAffinityTerm{}),
		generate(corev1.PreferredSchedulingTerm{}),
		generate(corev1.NodeSelector{}),
		generate(corev1.NodeSelectorTerm{}),
		generate(corev1.NodeSelectorRequirement{}),
		generate(metav1.LabelSelector{}),
		generate(metav1.LabelSelectorRequirement{}),
		// 1.23
		generate(kopsv1alpha2.PDCSIDriver{}),
		generate(kopsv1alpha2.AWSAuthenticationIdentityMappingSpec{}),
		generate(kopsv1alpha2.PodIdentityWebhookSpec{}),
		//	1.24
		// generate(kops.CloudProviderSpec{}),
		generate(kopsv1alpha2.KarpenterConfig{}),
		generate(kopsv1alpha2.RouteSpec{}),
		generate(kopsv1alpha2.AcceleratorConfig{}),
		// generate(kops.AWSSpec{}),
		generate(kopsv1alpha2.AzureSpec{}),
		// generate(kops.DOSpec{}),
		// generate(kops.GCESpec{}),
		// generate(kops.HetznerSpec{}),
		generate(kopsv1alpha2.OpenstackSpec{}),
		generate(kopsv1alpha2.InstanceRequirementsSpec{}),
		generate(kopsv1alpha2.MinMaxSpec{}),
		generate(kopsv1alpha2.Runc{}),
		// 1.26
		// generate(kops.ScalewaySpec{}),
		generate(kopsv1alpha2.APISpec{}),
		generate(kopsv1alpha2.DCGMExporterConfig{}),
		generate(kopsv1alpha2.LoadBalancerSpec{}),
	)
}
